Logistic Regression
========================================================
author: Wim van der Ham
autosize: true

Overview
========================================================

![Overview](./model_schema.jpg)

Logistic Regression
========================================================

- Supervised learning
- Predicting a binary response
- Maximum Likelihood

Formula:

![R squared](./formula.jpg)

In R: `glm(..., family = "binomial")`

Logistic Regression vs Linear Regression
========================================================

![R squared](./lm_vs_lg.jpg)

- Easier to interpret as a probability
- Can be extended to qualitative responses with more than two levels

Explore with Graphics
========================================================

```{r bar_sex_sur, echo=FALSE}
library(titanic)
library(tidyverse)
train <- as_tibble(titanic_train)

ggplot(train) +
  geom_bar(aes(factor(Survived))) +
  facet_wrap(~Sex)
```

Make the Model
========================================================

```{r}
model_sex <- glm(
  Survived ~ Sex, 
  train, family = "binomial"
) 
```

Check Model Using Summary
========================================================

```{r, echo=FALSE}
summary(model_sex)
```

Check Model Using Summary Coefficients
========================================================

**Call** the call used to create the model

**Residuals** description of the distribution of the residuals, median should be close to 0, 1Q and 3Q should be more or less the same

**Estimate** the estimated values for the coefficients

**Std. Error** the standard error, can be used to calculate confidence intervals for the estimates

**t value** the t-statistic, a measure of the number of sd the estimate is away from 0

**Pr(>|t|)** the p-value for the t-test

Calculate Probabilities
========================================================

```{r}
# Sex == female
exp(1) / (1 + exp(1))
# Sex == male
exp(1 + -2.5) / (1 + exp(1 + -2.5))
```

<!-- Check Model Using Summary Coefficients -->
<!-- ======================================================== -->

<!-- **Null deviance** how well the Null model fits the data -->

<!-- **Residual deviance** how well the proposed model fits the data -->

<!-- ```{r} -->
<!-- p_value <- pchisq( -->
<!--   1186.7 - 917.8, 1,  -->
<!--   lower.tail = FALSE -->
<!-- ) -->
<!-- p_value -->
<!-- ``` -->

Odds Ratios and Confidence Intervals
========================================================

```{r}
or_ci <- exp(cbind(
  OR = coef(model_sex), confint(model_sex)
)) %>%
  as_tibble(rownames = "estimates")
or_ci
```

Odds Ratios and Confidence Intervals
========================================================

**Odds Ratio** defined as the ratio of the odds of A in the presence of B and the odds of A without the presence of B. If much bigger or smaller than 1 A is considered associated with B.

The odds ratio for survival between men linkand women is `r or_ci$OR[[2]]`

Use Model to make Predictions
========================================================

```{r}
train <- train %>%
  mutate(
    prob = predict(
      model_sex, train,
      type = "response"
    ),
    pred = ifelse(
      prob > 0.5, 
      1, 
      0
    )
  )
```

Predict Types
========================================================

- **`link`** calculates the log-odds (the logarithm of the odds ratio's)
- **`response`** calculates the probabilities 
- **`terms`** calculates a matrix with fitted values for each term

Confusion Matrix 
========================================================

```{r}
table(train$Survived, train$pred)
```

Accuracy, Precision and Recall
========================================================

```{r}
# Accuracy
sum(train$pred == train$Survived) / nrow(train)
# Precision
sum(train$pred == 1 & train$Survived == 1) / sum(train$pred == 1)
# Recall
sum(train$pred == 1 & train$Survived == 1) / sum(train$Survived == 1)
```

ROC curve
========================================================

> The ROC curve is created by plotting the true positive rate (TPR) against the false positive rate (FPR)

This is usefull for comparing the overall performance of a model, sum-
marized over all possible thresholds

ROC curve - Model Sex
========================================================

```{r roc_sex, echo=FALSE}
library(ROCR)
prediction_object <- prediction(train$prob, train$Survived)
plot(
  performance(
    prediction_object, 
    "tpr", "fpr"
  )
)
```

ROC curve - Model Age & Sex
========================================================

```{r roc_age_sex, echo=FALSE}
model_age <- glm(
  Survived ~ Age + Sex, 
  train, family = "binomial"
) 
prediction_object <- prediction(predict(model_age, train, type = "response"), train$Survived)
plot(
  performance(
    prediction_object,
    "tpr", "fpr"
  )
)
```

Accuracy for Different Cutoff values
========================================================

```{r acc_cutoff, echo=FALSE}
plot(
  performance(
    prediction_object,
    "acc"
  )
)
```

Exercise
========================================================

Try to improve the example model by adding more factors
